'use client';

import { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { formatCurrency } from '@/lib/format';
import {
  BarChart3,
  Calendar,
  TrendingDown,
  TrendingUp,
  Users,
  DollarSign,
  Target,
  Activity,
  PieChart,
  Clock,
  CheckCircle2,
  AlertTriangle,
} from 'lucide-react';

interface DashboardEjecutivoProps {
  householdId: string;
}

interface DashboardStats {
  totalMembers: number;
  currentPeriodBalance: number;
  currentPeriodStatus: string;
  monthlyTrend: number;
  completedPeriods: number;
  totalPeriods: number;
  averageMonthlyBalance: number;
  lastActivity: string;
  pendingContributions: number;
  completedContributions: number;
}

export function DashboardEjecutivo({ householdId }: DashboardEjecutivoProps) {
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDashboardStats = async () => {
      try {
        const response = await fetch('/api/dual-flow/dashboard/stats');
        if (response.ok) {
          const result = await response.json();
          if (result.ok) {
            setStats(result.data);
          }
        }
      } catch (error) {
        console.error('Error fetching dashboard stats:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchDashboardStats();
  }, [householdId]);

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="text-center py-8">Cargando dashboard ejecutivo...</div>
      </div>
    );
  }

  if (!stats) {
    return (
      <div className="space-y-6">
        <div className="text-center py-8 text-muted-foreground">
          No se pudieron cargar las estadísticas del dashboard
        </div>
      </div>
    );
  }

  const completionRate = stats.totalPeriods > 0 ? (stats.completedPeriods / stats.totalPeriods) * 100 : 0;
  const contributionCompletionRate = (stats.completedContributions / (stats.completedContributions + stats.pendingContributions)) * 100;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center gap-3">
        <BarChart3 className="h-8 w-8 text-primary" />
        <div>
          <h1 className="text-3xl font-bold">Dashboard Ejecutivo</h1>
          <p className="text-muted-foreground">
            Visión general del estado financiero de tu hogar
          </p>
        </div>
      </div>

      {/* Métricas principales */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Miembros Activos</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalMembers}</div>
            <p className="text-xs text-muted-foreground">
              Colaborando activamente
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Balance Actual</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCurrency(stats.currentPeriodBalance)}</div>
            <p className="text-xs text-muted-foreground flex items-center gap-1">
              {stats.monthlyTrend >= 0 ? (
                <TrendingUp className="h-3 w-3 text-green-500" />
              ) : (
                <TrendingDown className="h-3 w-3 text-red-500" />
              )}
              {stats.monthlyTrend >= 0 ? '+' : ''}{formatCurrency(stats.monthlyTrend)} vs mes anterior
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Períodos Completados</CardTitle>
            <Target className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.completedPeriods}/{stats.totalPeriods}</div>
            <p className="text-xs text-muted-foreground">
              {completionRate.toFixed(1)}% de completitud
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Última Actividad</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.lastActivity}</div>
            <p className="text-xs text-muted-foreground">
              Actividad reciente
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Estado del período actual */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            Estado del Período Actual
          </CardTitle>
          <CardDescription>
            Progreso y métricas del período en curso
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Estado del período</span>
            <Badge variant={stats.currentPeriodStatus === 'active' ? 'default' : 'secondary'}>
              {stats.currentPeriodStatus === 'active' ? 'Activo' : 'Completado'}
            </Badge>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Completitud del período</span>
              <span>{completionRate.toFixed(1)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-primary h-2 rounded-full transition-all duration-500"
                style={{ width: `${completionRate}%` }}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Contribuciones y compromisos */}
      <div className="grid gap-4 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <PieChart className="h-5 w-5" />
              Contribuciones
            </CardTitle>
            <CardDescription>
              Estado de las contribuciones mensuales
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Completadas</span>
              <span className="text-sm text-muted-foreground">
                {stats.completedContributions} de {stats.completedContributions + stats.pendingContributions}
              </span>
            </div>

            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Progreso</span>
                <span>{contributionCompletionRate.toFixed(1)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-primary h-2 rounded-full transition-all duration-500"
                  style={{ width: `${contributionCompletionRate}%` }}
                />
              </div>
            </div>

            {stats.pendingContributions > 0 && (
              <div className="flex items-center gap-2 p-2 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
                <AlertTriangle className="h-4 w-4 text-yellow-600" />
                <span className="text-sm text-yellow-800 dark:text-yellow-200">
                  {stats.pendingContributions} contribución{stats.pendingContributions > 1 ? 'es' : ''} pendiente{stats.pendingContributions > 1 ? 's' : ''}
                </span>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle2 className="h-5 w-5" />
              Rendimiento Promedio
            </CardTitle>
            <CardDescription>
              Balance promedio mensual
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold mb-2">
              {formatCurrency(stats.averageMonthlyBalance)}
            </div>
            <p className="text-xs text-muted-foreground mb-4">
              Promedio de los últimos 6 meses
            </p>

            <div className="space-y-2">
              <div className="flex items-center gap-2 text-sm">
                <Clock className="h-4 w-4 text-muted-foreground" />
                <span>Actualización automática</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Activity className="h-4 w-4 text-muted-foreground" />
                <span>Datos en tiempo real</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Alertas y recomendaciones */}
      <Card>
        <CardHeader>
          <CardTitle>Recomendaciones</CardTitle>
          <CardDescription>
            Sugerencias basadas en tu actividad reciente
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          {stats.pendingContributions > 0 && (
            <div className="flex items-start gap-3 p-3 bg-blue-50 dark:bg-blue-950 rounded-lg">
              <CheckCircle2 className="h-5 w-5 text-blue-600 mt-0.5" />
              <div>
                <p className="font-medium text-blue-900 dark:text-blue-100">
                  Completar contribuciones pendientes
                </p>
                <p className="text-sm text-blue-700 dark:text-blue-300">
                  Tienes {stats.pendingContributions} contribución{stats.pendingContributions > 1 ? 'es' : ''} pendiente{stats.pendingContributions > 1 ? 's' : ''} de registrar.
                </p>
              </div>
            </div>
          )}

          {completionRate < 50 && (
            <div className="flex items-start gap-3 p-3 bg-orange-50 dark:bg-orange-950 rounded-lg">
              <TrendingUp className="h-5 w-5 text-orange-600 mt-0.5" />
              <div>
                <p className="font-medium text-orange-900 dark:text-orange-100">
                  Aumentar ritmo de trabajo
                </p>
                <p className="text-sm text-orange-700 dark:text-orange-300">
                  Solo has completado {completionRate.toFixed(1)}% del período actual.
                </p>
              </div>
            </div>
          )}

          {stats.monthlyTrend < 0 && (
            <div className="flex items-start gap-3 p-3 bg-red-50 dark:bg-red-950 rounded-lg">
              <TrendingDown className="h-5 w-5 text-red-600 mt-0.5" />
              <div>
                <p className="font-medium text-red-900 dark:text-red-100">
                  Atención al balance mensual
                </p>
                <p className="text-sm text-red-700 dark:text-red-300">
                  El balance ha disminuido {formatCurrency(Math.abs(stats.monthlyTrend))} respecto al mes anterior.
                </p>
              </div>
            </div>
          )}

          {stats.totalMembers === 1 && (
            <div className="flex items-start gap-3 p-3 bg-purple-50 dark:bg-purple-950 rounded-lg">
              <Users className="h-5 w-5 text-purple-600 mt-0.5" />
              <div>
                <p className="font-medium text-purple-900 dark:text-purple-100">
                  Invitar a más miembros
                </p>
                <p className="text-sm text-purple-700 dark:text-purple-300">
                  Considera invitar a tu pareja para compartir la gestión financiera.
                </p>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
  // Estado para el período seleccionado
  const currentDate = new Date();
  const [selectedYear, setSelectedYear] = useState(currentDate.getFullYear());
  const [selectedMonth, setSelectedMonth] = useState(currentDate.getMonth() + 1);

  // Nombres de los meses
  const monthNames = [
    'Enero',
    'Febrero',
    'Marzo',
    'Abril',
    'Mayo',
    'Junio',
    'Julio',
    'Agosto',
    'Septiembre',
    'Octubre',
    'Noviembre',
    'Diciembre',
  ];

  // Funciones de navegación
  const goToPreviousMonth = () => {
    if (selectedMonth === 1) {
      setSelectedMonth(12);
      setSelectedYear(selectedYear - 1);
    } else {
      setSelectedMonth(selectedMonth - 1);
    }
  };

  const goToNextMonth = () => {
    if (selectedMonth === 12) {
      setSelectedMonth(1);
      setSelectedYear(selectedYear + 1);
    } else {
      setSelectedMonth(selectedMonth + 1);
    }
  };

  const goToCurrentMonth = () => {
    setSelectedYear(currentDate.getFullYear());
    setSelectedMonth(currentDate.getMonth() + 1);
  };

  const isCurrentMonth =
    selectedYear === currentDate.getFullYear() && selectedMonth === currentDate.getMonth() + 1;

  // Datos de ejemplo para el período seleccionado
  // TODO: Reemplazar con datos reales de la base de datos
  const periodData = {
    totalIncome: 2500.0,
    totalExpenses: 1850.75,
    commonFund: 649.25,
    transactionCount: 28,
    status: isCurrentMonth ? 'active' : 'closed',
  };

  const balance = periodData.totalIncome - periodData.totalExpenses;
  const isPositive = balance >= 0;

  return (
    <div className="space-y-6">
      {/* Selector de Período */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            Selector de Período
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between">
            <Button
              variant="outline"
              onClick={goToPreviousMonth}
              className="flex items-center gap-2"
            >
              <ChevronLeft className="h-4 w-4" />
              Anterior
            </Button>

            <div className="text-center">
              <h2 className="text-2xl font-bold">
                {monthNames[selectedMonth - 1]} {selectedYear}
              </h2>
              {isCurrentMonth && (
                <Badge variant="default" className="mt-1">
                  Período Actual
                </Badge>
              )}
              {!isCurrentMonth && (
                <Badge variant="outline" className="mt-1">
                  {periodData.status === 'closed' ? 'Cerrado' : 'Histórico'}
                </Badge>
              )}
            </div>

            <Button variant="outline" onClick={goToNextMonth} className="flex items-center gap-2">
              Siguiente
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>

          <div className="flex justify-center mt-4">
            <Button
              variant="ghost"
              onClick={goToCurrentMonth}
              disabled={isCurrentMonth}
              className="text-sm"
            >
              Ir al mes actual
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Resumen del Período */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Ingresos Totales</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {formatCurrency(periodData.totalIncome)}
            </div>
            <div className="flex items-center gap-1 text-xs text-muted-foreground mt-1">
              <TrendingUp className="h-3 w-3" />
              Entradas del período
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Gastos Totales</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {formatCurrency(periodData.totalExpenses)}
            </div>
            <div className="flex items-center gap-1 text-xs text-muted-foreground mt-1">
              <TrendingDown className="h-3 w-3" />
              Salidas del período
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Balance</CardTitle>
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold ${isPositive ? 'text-green-600' : 'text-red-600'}`}>
              {isPositive ? '+' : ''}
              {formatCurrency(balance)}
            </div>
            <div className="flex items-center gap-1 text-xs text-muted-foreground mt-1">
              {isPositive ? (
                <TrendingUp className="h-3 w-3 text-green-600" />
              ) : (
                <TrendingDown className="h-3 w-3 text-red-600" />
              )}
              {isPositive ? 'Superávit' : 'Déficit'}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Estadísticas Detalladas */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="h-5 w-5" />
            Estadísticas del Período
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <h4 className="font-medium">Fondo Común</h4>
              <p className="text-2xl font-bold text-blue-600">
                {formatCurrency(periodData.commonFund)}
              </p>
              <p className="text-sm text-muted-foreground">Balance del fondo compartido</p>
            </div>

            <div className="space-y-2">
              <h4 className="font-medium">Transacciones</h4>
              <p className="text-2xl font-bold">{periodData.transactionCount}</p>
              <p className="text-sm text-muted-foreground">Operaciones realizadas</p>
            </div>
          </div>

          {/* Próximas funcionalidades */}
          <div className="border-t pt-4 space-y-2">
            <h4 className="font-medium text-muted-foreground">Próximamente:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-muted-foreground">
              <span>📊 Gráficos de evolución</span>
              <span>🏷️ Gastos por categoría</span>
              <span>📈 Comparativa con períodos anteriores</span>
              <span>💾 Exportar datos del período</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
