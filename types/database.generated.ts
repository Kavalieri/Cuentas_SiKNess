/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type DualFlowStatus = "approved" | "auto_paired" | "completed" | "pending_review" | "rejected";

export type DualFlowType = "common_fund" | "common_to_personal" | "personal_to_common";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type PeriodPhaseEnum = "active" | "closed" | "closing" | "preparing" | "validation";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type TransactionTypeDualFlow = "gasto" | "gasto_directo" | "ingreso" | "ingreso_directo";

export interface _Migrations {
  /**
   * Timestamp de aplicación
   */
  applied_at: Generated<Timestamp>;
  /**
   * Usuario PostgreSQL que aplicó la migración
   */
  applied_by: Generated<string>;
  /**
   * Hash MD5 del contenido del archivo
   */
  checksum: string | null;
  description: string | null;
  error_log: string | null;
  /**
   * Tiempo de ejecución en milisegundos
   */
  execution_time_ms: number | null;
  id: Generated<number>;
  /**
   * Nombre del archivo de migración
   */
  migration_name: string;
  output_log: string | null;
  /**
   * Estado: success, failed, rolled_back
   */
  status: Generated<string | null>;
}

export interface _MigrationsBackupPreV210 {
  applied_at: Timestamp | null;
  applied_by: string | null;
  checksum: string | null;
  description: string | null;
  execution_time_ms: number | null;
  id: number | null;
  migration_name: string | null;
}

export interface Categories {
  /**
   * Fecha de creación de la categoría.
   */
  created_at: Generated<Timestamp | null>;
  /**
   * ID del usuario que CREÓ esta categoría en el hogar.
   */
  created_by_profile_id: string | null;
  display_order: Generated<number | null>;
  household_id: string | null;
  icon: string | null;
  id: Generated<string>;
  name: string | null;
  /**
   * Reference to parent category group (NULL = legacy/ungrouped)
   */
  parent_id: string | null;
  type: string | null;
  /**
   * Fecha de la última modificación de la categoría.
   */
  updated_at: Generated<Timestamp | null>;
  /**
   * ID del usuario que MODIFICÓ esta categoría por última vez.
   */
  updated_by_profile_id: string | null;
}

export interface CategoryParents {
  created_at: Generated<Timestamp | null>;
  display_order: Generated<number | null>;
  household_id: string | null;
  icon: string;
  id: Generated<string>;
  name: string;
  type: string;
  updated_at: Generated<Timestamp | null>;
}

export interface ContributionAdjustments {
  amount: Numeric | null;
  approved_at: Timestamp | null;
  approved_by: string | null;
  category_id: string | null;
  contribution_id: string | null;
  created_at: Timestamp | null;
  created_by: string | null;
  expense_category_id: string | null;
  expense_description: string | null;
  id: Generated<string>;
  income_description: string | null;
  income_movement_id: string | null;
  movement_id: string | null;
  reason: string | null;
  rejected_at: Timestamp | null;
  rejected_by: string | null;
  status: string | null;
  template_id: string | null;
  type: string | null;
  updated_at: Timestamp | null;
}

export interface ContributionAdjustmentTemplates {
  category_id: string | null;
  created_at: Generated<Timestamp | null>;
  created_by: string | null;
  default_amount: Numeric | null;
  description: string | null;
  household_id: string;
  icon: string | null;
  id: Generated<string>;
  is_active: Generated<boolean>;
  is_default: Generated<boolean | null>;
  last_used_amount: Numeric | null;
  last_used_at: Timestamp | null;
  name: string;
  sort_order: Generated<number>;
  usage_count: Generated<number | null>;
}

export interface ContributionPeriods {
  closed_at: Timestamp | null;
  /**
   * Owner que cerró el período
   */
  closed_by: string | null;
  created_at: Generated<Timestamp | null>;
  household_id: string;
  id: Generated<string>;
  locked_at: Timestamp | null;
  /**
   * Owner que bloqueó el período y calculó contribuciones
   */
  locked_by: string | null;
  month: number;
  /**
   * SETUP: solo gastos directos, LOCKED: ambos flujos, CLOSED: período cerrado
   */
  status: Generated<string>;
  year: number;
}

export interface ContributionReconciliations {
  contribution_id: string;
  last_reconciled_at: Generated<Timestamp>;
  last_result: Json | null;
  notes: string | null;
  reconciled_by: string | null;
}

export interface Contributions {
  /**
   * Suma absoluta de ajustes que tienen movimiento vinculado (prepagos ya realizados)
   */
  adjustments_paid_amount: Generated<Numeric | null>;
  adjustments_total: Numeric | null;
  calculation_method: string | null;
  created_at: Generated<Timestamp | null>;
  /**
   * ID del usuario que CALCULÓ/CREÓ este registro de contribución. Puede ser diferente de profile_id (a quien pertenece).
   */
  created_by_profile_id: string | null;
  expected_amount: Numeric | null;
  household_id: string | null;
  id: Generated<string>;
  month: number | null;
  paid_amount: Numeric | null;
  paid_at: Timestamp | null;
  profile_id: string | null;
  status: string | null;
  updated_at: Timestamp | null;
  /**
   * ID del usuario que MODIFICÓ esta contribución por última vez.
   */
  updated_by_profile_id: string | null;
  year: number | null;
}

export interface CreditRefundRequests {
  amount: Numeric;
  approved_at: Timestamp | null;
  approved_by: string | null;
  household_id: string;
  id: Generated<string>;
  notes: string | null;
  profile_id: string;
  /**
   * Si refund_type=transaction: ID de la transacción de gasto vinculada que justifica el reembolso
   */
  refund_transaction_id: string | null;
  /**
   * Tipo de reembolso: 
   *    - balance: Reembolso de saldo acumulado a favor (requiere validación de owner, genera movimiento)
   *    - transaction: Reembolso asociado a transacción existente (sin cálculos extra, solo resta saldo)
   */
  refund_type: Generated<string | null>;
  requested_at: Generated<Timestamp>;
  requested_by: string;
  status: Generated<string>;
}

export interface DualFlowConfig {
  created_at: Generated<Timestamp | null>;
  dias_liquidacion: Generated<number | null>;
  emparejamiento_automatico: Generated<boolean | null>;
  household_id: string;
  limite_gasto_personal: Generated<Numeric | null>;
  liquidacion_automatica: Generated<boolean | null>;
  notificaciones_activas: Generated<boolean | null>;
  notificar_emparejamientos: Generated<boolean | null>;
  notificar_limites: Generated<boolean | null>;
  notificar_liquidaciones: Generated<boolean | null>;
  notificar_nuevos_gastos: Generated<boolean | null>;
  requiere_aprobacion_default: Generated<boolean | null>;
  tiempo_revision_default: Generated<number | null>;
  umbral_emparejamiento_default: Generated<Numeric | null>;
  updated_at: Generated<Timestamp | null>;
}

export interface DualFlowEvents {
  created_at: Generated<Timestamp>;
  created_by: string | null;
  /**
   * Identificador canónico del evento (ej. period.validated, period.closed)
   */
  event_type: string;
  household_id: string;
  id: Generated<string>;
  /**
   * Información adicional del evento en formato JSON
   */
  payload: Generated<Json>;
  period_id: string | null;
}

export interface DualFlowTransactions {
  approved_at: Timestamp | null;
  approved_by: string | null;
  auto_paired: Generated<boolean | null>;
  categoria: string;
  concepto: string;
  creado_por: string;
  created_at: Generated<Timestamp | null>;
  dias_revision: Generated<number | null>;
  estado: Generated<DualFlowStatus>;
  fecha: Generated<Timestamp>;
  household_id: string;
  id: Generated<string>;
  importe: Numeric;
  pagado_por: string | null;
  requiere_aprobacion: Generated<boolean | null>;
  tipo: TransactionTypeDualFlow;
  tipo_flujo: DualFlowType;
  transaccion_pareja: string | null;
  umbral_emparejamiento: Generated<Numeric | null>;
  updated_at: Generated<Timestamp | null>;
}

export interface EmailInvitations {
  /**
   * Timestamp cuando se aceptó la invitación
   */
  accepted_at: Timestamp | null;
  /**
   * Perfil temporal que aceptó (antes de merge). NULL si aún no aceptada o si perfil fue eliminado
   */
  accepted_by_profile_id: string | null;
  created_at: Generated<Timestamp>;
  /**
   * Fecha de expiración de la invitación (default: 7 días)
   */
  expires_at: Timestamp;
  id: Generated<string>;
  /**
   * Email invitado a ser alias del perfil
   */
  invited_email: string;
  /**
   * Datos adicionales: IP, user agent, etc.
   */
  metadata: Generated<Json | null>;
  /**
   * Perfil que genera la invitación (el que comparte su cuenta)
   */
  profile_id: string;
  /**
   * Estado: pending (activa), accepted (aceptada), expired (vencida), cancelled (cancelada por invitador)
   */
  status: Generated<string>;
  /**
   * Token único para validar la invitación (UUID)
   */
  token: string;
}

export interface HouseholdMembers {
  household_id: string;
  /**
   * ID del usuario que invitó a este miembro al hogar. NULL si fue el creador del hogar.
   */
  invited_by_profile_id: string | null;
  /**
   * Indica si el usuario es propietario del hogar. Puede gestionar configuración, invitar miembros, etc.
   */
  is_owner: Generated<boolean>;
  /**
   * Fecha en que el usuario se unió al hogar (aceptó la invitación).
   */
  joined_at: Generated<Timestamp | null>;
  profile_id: string;
  role: string | null;
}

export interface Households {
  created_at: Generated<Timestamp | null>;
  /**
   * ID del usuario que CREÓ este hogar. Por defecto es owner del mismo.
   */
  created_by_profile_id: string | null;
  /**
   * Timestamp de eliminación lógica (soft delete). NULL = hogar activo. Permite auditoría y recuperación.
   */
  deleted_at: Timestamp | null;
  id: Generated<string>;
  name: string;
  /**
   * LEGACY: Campo jsonb de configuración antigua, archivado. No usar en lógica actual.
   */
  settings_archivo: Json | null;
  status: string | null;
  /**
   * Fecha de la última modificación del hogar.
   */
  updated_at: Generated<Timestamp | null>;
  /**
   * ID del usuario que MODIFICÓ la configuración del hogar por última vez.
   */
  updated_by_profile_id: string | null;
}

export interface HouseholdSavings {
  created_at: Generated<Timestamp | null>;
  currency: string | null;
  current_balance: Numeric | null;
  goal_amount: Numeric | null;
  goal_deadline: Timestamp | null;
  goal_description: string | null;
  household_id: string | null;
  id: Generated<string>;
  updated_at: Generated<Timestamp | null>;
}

export interface HouseholdSettings {
  calculation_type: string | null;
  currency: string | null;
  household_id: string;
  monthly_contribution_goal: Numeric | null;
  updated_at: Timestamp | null;
  updated_by: string | null;
}

export interface Invitations {
  accepted_at: Timestamp | null;
  accepted_by: string | null;
  /**
   * Fecha en que se creó/envió la invitación.
   */
  created_at: Generated<Timestamp | null>;
  current_uses: Generated<number>;
  email: string;
  expires_at: Timestamp;
  household_id: string;
  id: Generated<string>;
  invited_by: string;
  /**
   * ID del usuario que ENVIÓ esta invitación (owner del hogar).
   */
  invited_by_profile_id: string | null;
  max_uses: Generated<number | null>;
  metadata: Generated<Json | null>;
  status: Generated<string>;
  token: string;
  type: Generated<string>;
}

export interface JournalAdjustments {
  action: string;
  adjustment_id: string | null;
  id: Generated<string>;
  new_data: Json | null;
  old_data: Json | null;
  performed_at: Generated<Timestamp | null>;
  performed_by: string | null;
  reason: string | null;
}

export interface JournalInvitations {
  action: string;
  id: Generated<string>;
  invitation_id: string | null;
  new_data: Json | null;
  old_data: Json | null;
  performed_at: Generated<Timestamp | null>;
  performed_by: string | null;
  reason: string | null;
}

export interface JournalRoles {
  action: string;
  household_id: string | null;
  id: Generated<string>;
  new_data: Json | null;
  old_data: Json | null;
  performed_at: Generated<Timestamp | null>;
  performed_by: string | null;
  profile_id: string | null;
  reason: string | null;
}

export interface JournalTransactions {
  action: string;
  id: Generated<string>;
  new_data: Json | null;
  old_data: Json | null;
  performed_at: Generated<Timestamp | null>;
  performed_by: string | null;
  reason: string | null;
  transaction_id: string | null;
}

export interface MemberBalances {
  /**
   * Balance actual: (+) hogar debe a miembro, (-) miembro debe al hogar, (0) saldado
   */
  current_balance: Generated<Numeric>;
  household_id: string;
  last_updated_at: Generated<Timestamp>;
  notes: string | null;
  profile_id: string;
}

export interface MemberCredits {
  amount: Numeric | null;
  applied_at: Timestamp | null;
  applied_to_contribution_id: string | null;
  applied_to_period_id: string | null;
  created_at: Generated<Timestamp | null>;
  /**
   * ID del usuario que OTORGÓ este crédito al miembro.
   */
  created_by_profile_id: string | null;
  currency: string | null;
  household_id: string | null;
  id: Generated<string>;
  monthly_decision: string | null;
  profile_id: string | null;
  /**
   * Timestamp cuando el crédito fue reservado para aplicar al mes siguiente.
   * NULL = crédito activo (puede gastarse, forma parte del balance principal)
   * NOT NULL = crédito reservado (bloqueado para próximo mes, NO disponible para gastos)
   *
   * Cuando un miembro decide "aplicar al mes siguiente" su crédito, se marca reserved_at.
   * Esto retira el crédito del balance principal disponible inmediatamente.
   */
  reserved_at: Timestamp | null;
  source_month: number | null;
  source_period_id: string | null;
  source_year: number | null;
  status: string | null;
  /**
   * Fecha de la última modificación del crédito.
   */
  updated_at: Generated<Timestamp | null>;
  /**
   * ID del usuario que MODIFICÓ este crédito por última vez.
   */
  updated_by_profile_id: string | null;
}

export interface MemberIncomes {
  created_at: Generated<Timestamp | null>;
  effective_from: Timestamp | null;
  household_id: string | null;
  id: Generated<string>;
  monthly_income: Numeric | null;
  profile_id: string | null;
}

export interface MonthlyPeriods {
  closed_at: Timestamp | null;
  closed_by: string | null;
  /**
   * Balance al final del mes (se convierte en opening_balance del siguiente)
   */
  closing_balance: Numeric | null;
  /**
   * Fecha y hora en la que se inició el cierre del período
   */
  closing_started_at: Timestamp | null;
  /**
   * Perfil que inició el cierre del período
   */
  closing_started_by: string | null;
  /**
   * Si TRUE, este período ignora el sistema de contribuciones.
   * Útil para meses pasados donde no se hizo ingreso común y todo se manejó con gastos directos.
   * Cuando TRUE, las contribuciones se establecen a 0€ para todos los miembros.
   */
  contribution_disabled: Generated<boolean>;
  created_at: Generated<Timestamp | null>;
  household_id: string | null;
  id: Generated<string>;
  /**
   * Última fecha/hora de retroceso de fase.
   */
  last_reopened_at: Timestamp | null;
  /**
   * Perfil que ejecutó el último retroceso de fase.
   */
  last_reopened_by: string | null;
  /**
   * Marca temporal de cierre de aportaciones manuales en el período
   */
  locked_at: Timestamp | null;
  /**
   * Perfil que ejecutó el cierre manual de aportaciones
   */
  locked_by: string | null;
  month: number | null;
  notes: string | null;
  /**
   * Fecha y hora en la que el período pasó a fase activa
   */
  opened_at: Generated<Timestamp>;
  /**
   * Perfil que activó el período
   */
  opened_by: string | null;
  /**
   * Balance al inicio del mes (heredado del mes anterior)
   */
  opening_balance: Numeric | null;
  /**
   * Fase operativa del período mensual (preparing, validation, active, closing o closed)
   */
  phase: Generated<PeriodPhaseEnum>;
  /**
   * Número de veces que el período ha retrocedido de fase (reaperturas).
   */
  reopened_count: Generated<number>;
  /**
   * Snapshot del objetivo de contribución al momento de bloquear el período.
   *    NULL = período en preparing (usa valor actual de household_settings).
   *    NOT NULL = período bloqueado/cerrado (usa este valor histórico).
   *    Se guarda automáticamente al ejecutar lockPeriod() o lock_contributions_period().
   */
  snapshot_contribution_goal: Generated<Numeric | null>;
  /**
   * Estado: open (actual), pending_close (pasado sin cerrar), closed (cerrado)
   */
  status: string | null;
  total_expenses: Numeric | null;
  total_income: Numeric | null;
  /**
   * Marca de tiempo de la última actualización del período mensual
   */
  updated_at: Generated<Timestamp>;
  /**
   * Momento en el que el período fue validado para activar contribuciones
   */
  validated_at: Timestamp | null;
  /**
   * Perfil que validó el período para activar contribuciones
   */
  validated_by: string | null;
  year: number | null;
}

export interface PersonalLoans {
  amount: Numeric;
  approved_at: Timestamp | null;
  approved_by: string | null;
  created_at: Generated<Timestamp>;
  household_id: string;
  id: Generated<string>;
  notes: string | null;
  profile_id: string;
  requested_at: Generated<Timestamp>;
  requested_by: string;
  settled_at: Timestamp | null;
  settled_by: string | null;
  settlement_transaction_id: string | null;
  /**
   * Estado: pending (pendiente aprobación), approved (aprobado y retirado), rejected (rechazado), settled (liquidado)
   */
  status: Generated<string>;
  updated_at: Generated<Timestamp>;
  withdrawal_transaction_id: string | null;
}

export interface ProfileEmails {
  added_at: Generated<Timestamp>;
  /**
   * Referencia al usuario que agregó este email (normalmente el mismo profile_id)
   */
  added_by: string | null;
  /**
   * Dirección de email. Debe ser única en todo el sistema.
   */
  email: string;
  id: Generated<string>;
  /**
   * Indica si este es el email principal del usuario. Solo puede haber uno por perfil.
   */
  is_primary: Generated<boolean>;
  /**
   * Referencia al perfil propietario de este email
   */
  profile_id: string;
  updated_at: Generated<Timestamp>;
  /**
   * Indica si el email ha sido verificado por el usuario
   */
  verified: Generated<boolean>;
  /**
   * Timestamp de cuándo se verificó el email
   */
  verified_at: Timestamp | null;
}

export interface Profiles {
  auth_user_id: string | null;
  avatar_url: string | null;
  bio: string | null;
  created_at: Timestamp | null;
  /**
   * Timestamp de borrado lógico. NULL = perfil activo, NOT NULL = perfil eliminado
   */
  deleted_at: Timestamp | null;
  display_name: string | null;
  email: string | null;
  /**
   * UUID único del perfil, generado automáticamente
   */
  id: Generated<string>;
  /**
   * Indica si el usuario es administrador de la aplicación (acceso a /admin). Campo global, no depende de hogares.
   */
  is_system_admin: Generated<boolean>;
  updated_at: Timestamp | null;
}

export interface RefundClaims {
  approved_at: Timestamp | null;
  approved_by_profile_id: string | null;
  created_at: Generated<Timestamp | null>;
  created_by_profile_id: string | null;
  expense_transaction_id: string;
  household_id: string;
  id: Generated<string>;
  profile_id: string;
  reason: string | null;
  refund_amount: Numeric;
  refund_transaction_id: string | null;
  /**
   * pending: Reclamo en espera de aprobación del owner. 
   *    approved: Owner aprobó, se cuenta el reembolso en el balance.
   *    rejected: Owner rechazó, no se cuenta el reembolso.
   */
  status: Generated<string | null>;
  updated_at: Generated<Timestamp | null>;
}

export interface Subcategories {
  category_id: string;
  created_at: Generated<Timestamp | null>;
  display_order: Generated<number | null>;
  icon: string | null;
  id: Generated<string>;
  name: string;
  updated_at: Generated<Timestamp | null>;
}

export interface SystemAdmins {
  created_at: Timestamp | null;
  granted_by: string | null;
  notes: string | null;
  profile_id: string | null;
  user_id: string;
}

export interface Transactions {
  amount: Numeric | null;
  /**
   * Fecha/hora en la que la transacción fue aprobada
   */
  approved_at: Timestamp | null;
  /**
   * Perfil que aprobó la transacción dual-flow
   */
  approved_by: string | null;
  /**
   * Marca si la transacción fue emparejada automáticamente
   */
  auto_paired: Generated<boolean>;
  category_id: string | null;
  created_at: Generated<Timestamp | null>;
  /**
   * Email del usuario que creó el registro en el sistema
   */
  created_by_email: string | null;
  /**
   * Miembro que creó la transacción (puede diferir de quien pagó)
   */
  created_by_member_id: string | null;
  /**
   * ID del usuario que REGISTRÓ esta transacción en el sistema. Diferente de paid_by (quien pagó).
   */
  created_by_profile_id: string | null;
  currency: string | null;
  description: string | null;
  /**
   * Estado operativo dual-flow de la transacción
   */
  dual_flow_status: Generated<DualFlowStatus>;
  /**
   * Tipo de flujo: common (cuenta común) o direct (gastos directos de miembros)
   */
  flow_type: Generated<string>;
  household_id: string | null;
  /**
   * UUID generado automáticamente por PostgreSQL
   */
  id: Generated<string>;
  occurred_at: Timestamp | null;
  paid_by: string | null;
  /**
   * Umbral de importe para emparejamiento automático (diferencia aceptada)
   */
  pairing_threshold: Generated<Numeric | null>;
  /**
   * Fecha/hora real cuando se realizó la transacción (diferente de created_at que es cuando se registró en el sistema)
   */
  performed_at: Timestamp | null;
  /**
   * Email del usuario que realmente realizó la transacción
   */
  performed_by_email: string | null;
  period_id: string | null;
  profile_id: string | null;
  /**
   * ID del miembro que realmente pagó en gastos directos (de su bolsillo)
   */
  real_payer_id: string | null;
  /**
   * UUID que vincula un reembolso DECLARADO a su gasto directo correspondiente. 
   *    Permite saber: "Este gasto directo incluye un reembolso de X euros".
   *    NULL = sin vinculación de reembolso (gasto directo normal o reembolso activo independiente).
   *    Self-referencing: refund_claim_id apunta a otra fila en transactions (el gasto directo que respalda el reembolso).
   */
  refund_claim_id: string | null;
  /**
   * Indica si la transacción necesita aprobación manual
   */
  requires_approval: Generated<boolean>;
  /**
   * Días límite para revisión antes de la auto-aprobación
   */
  review_days: Generated<number | null>;
  /**
   * Optional detailed subcategory (migrated from description field)
   */
  subcategory_id: string | null;
  /**
   * UUID que vincula gastos directos con sus ingresos automáticos correspondientes
   */
  transaction_pair_id: string | null;
  type: string | null;
  updated_at: Generated<Timestamp | null>;
  /**
   * ID del usuario que MODIFICÓ esta transacción por última vez.
   */
  updated_by_profile_id: string | null;
}

export interface UserActiveHousehold {
  /**
   * ID del hogar actualmente activo para este usuario.
   */
  household_id: string;
  /**
   * ID del perfil del usuario (profiles.id).
   */
  profile_id: string;
  /**
   * Última vez que el usuario cambió su hogar activo.
   */
  updated_at: Generated<Timestamp | null>;
}

export interface UserSettings {
  active_household_id: string | null;
  created_at: Timestamp | null;
  preferences: Json | null;
  profile_id: string;
  updated_at: Timestamp | null;
}

export interface VDualFlowBalance {
  auto_emparejadas: Int8 | null;
  fondo_comun: Numeric | null;
  gastos_personales_pendientes: Numeric | null;
  household_id: string | null;
  pendientes_revision: Int8 | null;
  reembolsos_pendientes: Numeric | null;
  total_common_to_personal: Numeric | null;
  total_personal_to_common: Numeric | null;
  total_transacciones: Int8 | null;
}

export interface VDualFlowMetrics {
  aprobadas: Int8 | null;
  auto_emparejadas: Int8 | null;
  completadas: Int8 | null;
  dias_promedio_procesamiento: Numeric | null;
  gastos_comunes: Int8 | null;
  gastos_directos: Int8 | null;
  hogares_activos: Int8 | null;
  importe_promedio: Numeric | null;
  ingresos_comunes: Int8 | null;
  ingresos_directos: Int8 | null;
  pendientes_revision: Int8 | null;
  porcentaje_auto_pairing: Numeric | null;
  scope: string | null;
  total_transacciones: Int8 | null;
}

export interface VDualFlowTransactionsUnified {
  approved_at: Timestamp | null;
  approved_by: string | null;
  auto_paired: boolean | null;
  categoria: string | null;
  concepto: string | null;
  creado_por: string | null;
  created_at: Timestamp | null;
  dias_revision: number | null;
  estado: DualFlowStatus | null;
  fecha: Timestamp | null;
  household_id: string | null;
  id: string | null;
  importe: Numeric | null;
  pagado_por: string | null;
  requiere_aprobacion: boolean | null;
  tipo: TransactionTypeDualFlow | null;
  tipo_flujo: DualFlowType | null;
  transaccion_pareja: string | null;
  umbral_emparejamiento: Numeric | null;
  updated_at: Timestamp | null;
}

export interface VDualFlowWorkflow {
  approved_at: Timestamp | null;
  approved_by: string | null;
  auto_paired: boolean | null;
  categoria: string | null;
  concepto: string | null;
  creado_por: string | null;
  creado_por_nombre: string | null;
  created_at: Timestamp | null;
  dias_desde_creacion: number | null;
  dias_restantes_revision: number | null;
  dias_revision: number | null;
  estado: DualFlowStatus | null;
  fecha: Timestamp | null;
  household_id: string | null;
  id: string | null;
  importe: Numeric | null;
  pagado_por: string | null;
  pagado_por_nombre: string | null;
  pareja_concepto: string | null;
  pareja_importe: Numeric | null;
  pareja_tipo: TransactionTypeDualFlow | null;
  requiere_aprobacion: boolean | null;
  tipo: TransactionTypeDualFlow | null;
  tipo_flujo: DualFlowType | null;
  transaccion_pareja: string | null;
  umbral_emparejamiento: Numeric | null;
  updated_at: Timestamp | null;
}

export interface VPendingRefundClaims {
  category_icon: string | null;
  claimed_at: Timestamp | null;
  display_name: string | null;
  email: string | null;
  expense_amount: Numeric | null;
  expense_category: string | null;
  expense_date: Timestamp | null;
  expense_description: string | null;
  household_id: string | null;
  id: string | null;
  profile_id: string | null;
  reason: string | null;
  refund_amount: Numeric | null;
  status: string | null;
}

export interface VProfilePrimaryEmail {
  display_name: string | null;
  email_verified: boolean | null;
  email_verified_at: Timestamp | null;
  primary_email: string | null;
  profile_id: string | null;
}

export interface VTransactionPairs {
  expense_amount: Numeric | null;
  expense_category_id: string | null;
  expense_description: string | null;
  expense_id: string | null;
  household_id: string | null;
  income_amount: Numeric | null;
  income_description: string | null;
  income_id: string | null;
  occurred_at: Timestamp | null;
  real_payer_id: string | null;
  transaction_pair_id: string | null;
}

export interface DB {
  _migrations: _Migrations;
  _migrations_backup_pre_v2_1_0: _MigrationsBackupPreV210;
  categories: Categories;
  category_parents: CategoryParents;
  contribution_adjustment_templates: ContributionAdjustmentTemplates;
  contribution_adjustments: ContributionAdjustments;
  contribution_periods: ContributionPeriods;
  contribution_reconciliations: ContributionReconciliations;
  contributions: Contributions;
  credit_refund_requests: CreditRefundRequests;
  dual_flow_config: DualFlowConfig;
  dual_flow_events: DualFlowEvents;
  dual_flow_transactions: DualFlowTransactions;
  email_invitations: EmailInvitations;
  household_members: HouseholdMembers;
  household_savings: HouseholdSavings;
  household_settings: HouseholdSettings;
  households: Households;
  invitations: Invitations;
  journal_adjustments: JournalAdjustments;
  journal_invitations: JournalInvitations;
  journal_roles: JournalRoles;
  journal_transactions: JournalTransactions;
  member_balances: MemberBalances;
  member_credits: MemberCredits;
  member_incomes: MemberIncomes;
  monthly_periods: MonthlyPeriods;
  personal_loans: PersonalLoans;
  profile_emails: ProfileEmails;
  profiles: Profiles;
  refund_claims: RefundClaims;
  subcategories: Subcategories;
  system_admins: SystemAdmins;
  transactions: Transactions;
  user_active_household: UserActiveHousehold;
  user_settings: UserSettings;
  v_dual_flow_balance: VDualFlowBalance;
  v_dual_flow_metrics: VDualFlowMetrics;
  v_dual_flow_transactions_unified: VDualFlowTransactionsUnified;
  v_dual_flow_workflow: VDualFlowWorkflow;
  v_pending_refund_claims: VPendingRefundClaims;
  v_profile_primary_email: VProfilePrimaryEmail;
  v_transaction_pairs: VTransactionPairs;
}
